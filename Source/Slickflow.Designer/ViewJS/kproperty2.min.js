var activityproperty = function () { function e() { } function t(e) { var t = null, i = []; if (e.sdata.performers && e.sdata.performers.length > 0) for (var o = 0; o < e.sdata.performers.length; o++) t = s(e.sdata.performers[o].id), t && i.push(t); return i } function s(e) { var t = null, s = null, s = kmain.mcurrentPackageData; if (s && s.participants) for (var i = 0; i < s.participants.length; i++) { var o = s.participants[i]; if (e == o.id) { t = { id: o.id, name: o.name, code: o.code, outerId: o.outerId }; break } } return t } return e.loadActivity = function () { $("#ddlComplexType").prop("selectedIndex", -1), $("#ddlMergeType").prop("selectedIndex", -1), $("#ddlCompareType").prop("selectedIndex", -1); var t = kmain.currentSelectedDomElement.node; if (t) { $("#txtActivityName").val(t.sdata.name), $("#txtActivityCode").val(t.sdata.code), $("#txtDescription").val(t.sdata.description), e.getActivityPerformer(t); var s = t.type(); s == kgraph.Config.NODE_TYPE_MULTIPLEINSTANCE ? ($("#divMultipleInstanceContent").show(), $("#ddlComplexType").val(t.sdata.complexType), $("#ddlMergeType").val(t.sdata.mergeType), $("#ddlCompareType").val(t.sdata.compareType), $("#txtCompleteOrder").val(t.sdata.completeOrder)) : $("#divMultipleInstanceContent").hide() } }, e.getActivityPerformer = function (e) { var s = [{ id: "id", name: "id", field: "outerId", width: 60, cssClass: "bg-gray" }, { id: "RoleName", name: "角色名称", field: "name", width: 200, cssClass: "bg-gray" }, { id: "RoleCode", name: "角色代码", field: "code", width: 200, cssClass: "bg-gray" }], i = { editable: !0, enableCellNavigation: !0, enableColumnReorder: !0, asyncEditorLoading: !0, forceFitColumns: !1, topPanelHeight: 25 }, o = t(e), n = new Slick.Data.DataView({ inlineFilters: !0 }), a = new Slick.Grid("#myPerformerGrid", n, s, i); n.onRowsChanged.subscribe(function (e, t) { a.invalidateRows(t.rows), a.render() }), n.onRowCountChanged.subscribe(function (e, t) { a.updateRowCount(), a.render() }), n.beginUpdate(), n.setItems(o, "id"), a.setSelectionModel(new Slick.RowSelectionModel), n.endUpdate(), a.onSelectedRowsChanged.subscribe(function (e, t) { var s = t.rows[0], i = n.getItemByIdx(s); i && (kmain.selectedActivityPerformerGUID = i.id) }) }, e.saveActivity = function () { var e = $("#txtActivityName").val(), t = $("#txtActivityCode").val(), s = $("#txtDescription").val(), i = $("#modelActivityForm").data("node"); if (i) { i.sdata.name = e, i.sdata.code = t, i.sdata.description = s; var o = i.type(); o == kgraph.Config.NODE_TYPE_MULTIPLEINSTANCE && (i.sdata.complexType = $("#ddlComplexType").val(), i.sdata.mergeType = $("#ddlMergeType").val(), i.sdata.compareType = $("#ddlCompareType").val(), i.sdata.completeOrder = $("#txtCompleteOrder").val()), i.setNodeName(e) } $("#modelActivityForm").modal("hide") }, e.addPerformer = function () { kmain.selectedParticipantType = null, kmain.selectedParticipantItem = null, $("#modelRoleListForm").modal({ remote: "/sfd/role/list" }) }, e.syncActivityPerformers = function (t, s) { var i = kmain.currentSelectedDomElement.node, o = i.sdata.performers; o || (o = i.sdata.performers = []); for (var n = kmain.mcurrentPackageData, a = n.participants, r = null, l = 0; l < a.length; l++) if ("role" == t && "Role" == a[l].type && s.ID == a[l].outerId) { r = a[l]; break } if (r) { for (var d = !1, l = 0; l < o.length; l++) if (r.id == o[l].id) { d = !0; break } if (d) $.msgBox({ title: "Desinger / ActivityProperty", content: "要添加的角色或用户数据已经存在！", type: "info" }); else { var c = { id: r.id, name: r.name, code: r.code, outerId: r.outerId }; i.sdata.performers.push(c), e.getActivityPerformer(i) } } else if ("role" == t) { var p = { id: jshelper.getUUID(), type: "Role", name: s.RoleName, code: s.RoleCode, outerId: s.ID }; kmain.mgraphView.packageData.participants.push(p); var c = { id: p.id, name: p.name, code: p.code, outerId: p.outerId }; i.sdata.performers.push(c), e.getActivityPerformer(i) } }, e.delPerformer = function () { var t = kmain.selectedActivityPerformerGUID, s = kmain.currentSelectedDomElement.node, i = s.sdata.performers; s.sdata.performers = jQuery.grep(i, function (e) { return e.id != t }), e.getActivityPerformer(s) }, e }(), gatewayproperty = function () { function e() { } return e.splitOptions = [{ value: "AndSplit", text: "与分支" }, { value: "OrSplit", text: "或分支" }], e.joinOptions = [{ value: "AndJoin", text: "与合并" }, { value: "OrJoin", text: "或合并" }], e.appendDirectionType = function (t) { $("#ddlDirectionType").empty().append('<option value="default" selected>--请选择--</option>'); var s = null; if ("Split" == t) for (var i = 0; i < e.splitOptions.length; i++) s = e.splitOptions[i], $("#ddlDirectionType").append($("<option></option>").attr("value", s.value).text(s.text)); else if ("Join" == t) for (var i = 0; i < e.joinOptions.length; i++) s = e.joinOptions[i], $("#ddlDirectionType").append($("<option></option>").attr("value", s.value).text(s.text)) }, e.loadGatewayInformation = function () { var t = kmain.currentSelectedDomElement.node; if (t && ($("#txtDescription").val(t.sdata.description), t.sdata.gatewaySplitJoinType)) { var s = t.sdata.gatewaySplitJoinType; $("#ddlGatewayType").val(s), t.sdata.gatewayDirection && (e.appendDirectionType(s), $("#ddlDirectionType").val(t.sdata.gatewayDirection)) } $("#ddlGatewayType").change(function () { var t = $("#ddlGatewayType").val(); e.appendDirectionType(t) }) }, e.saveGatewayInformation = function () { var e = $("#txtDescription").val(), t = $("#ddlGatewayType").val(), s = $("#ddlDirectionType").val(); if ("default" == t) return void $.msgBox({ title: "Designer / GatewayProperty", content: "请重新选择分支合并类型！", type: "info" }); if ("default" == s) return void $.msgBox({ title: "Designer / GatewayProperty", content: "请重新选择分支合并的子类型！", type: "info" }); var i = $("#modelGatewayForm").data("node"); i ? (window.console.log(i.sdata.name), i.sdata.description = e, i.sdata.gatewaySplitJoinType = t, i.sdata.gatewayDirection = s) : window.console.log("node is null"), $("#modelGatewayForm").modal("hide") }, e }(), processfile = function () { function e() { } return e.queryProcessFile = function (e, t) { jshelper.ajaxPost("/sfd/api/Wf2Xml/QueryProcessFile", JSON.stringify(e), function (e) { t(e) }) }, e.saveProcessFile = function (e) { jshelper.ajaxPost("/sfd/api/Wf2Xml/SaveProcessFile", JSON.stringify(e), function (e) { "1" == e.Status ? $.msgBox({ title: "Designer / Index", content: "流程XML内容保存成功！", type: "info" }) : $.msgBox({ title: "Designer / Index", content: "流程XML内容保存失败！错误信息：" + e.Message, type: "info" }) }) }, e }(), processlist = function () { function e() { } return e.pselectedProcessGUID = "", e.pselectedProcessDataRow = null, e.initListForm = function () { $("#modelProcessListForm").on("hidden", function () { $(this).removeData("modal").find(".modal-body").empty() }) }, e.getProcessList = function () { function t(e, t, s, i, o) { return null != s && "" != s ? s.substring(0, 10) : void 0 } $("#loading-indicator").show(), jshelper.ajaxGet("/sfd/api/Wf2Xml/GetProcessListSimple", null, function (s) { if (1 === s.Status) { var i = [{ id: "ID", name: "ID", field: "ID", width: 40, cssClass: "bg-gray" }, { id: "ProcessGUID", name: "流程GUID", field: "ProcessGUID", width: 120, cssClass: "bg-gray" }, { id: "ProcessName", name: "流程名称", field: "ProcessName", width: 160, cssClass: "bg-gray" }, { id: "Version", name: "版本", field: "Version", width: 40, cssClass: "bg-gray" }, { id: "IsUsing", name: "使用状态", field: "IsUsing", width: 60, cssClass: "bg-gray" }, { id: "CreatedDateTime", name: "创建日期", field: "CreatedDateTime", width: 120, cssClass: "bg-gray", formatter: t }], o = { editable: !0, enableCellNavigation: !0, enableColumnReorder: !0, asyncEditorLoading: !0, forceFitColumns: !1, topPanelHeight: 25 }, n = s.Entity, a = new Slick.Data.DataView({ inlineFilters: !0 }), r = new Slick.Grid("#myProcessGrid", a, i, o); a.onRowsChanged.subscribe(function (e, t) { r.invalidateRows(t.rows), r.render() }), a.onRowCountChanged.subscribe(function (e, t) { r.updateRowCount(), r.render() }), a.beginUpdate(), a.setItems(n, "ID"), r.setSelectionModel(new Slick.RowSelectionModel), a.endUpdate(), r.onSelectedRowsChanged.subscribe(function (t, s) { var i = s.rows[0], o = a.getItemByIdx(i); o && (e.pselectedProcessGUID = o.ProcessGUID, e.pselectedProcessDataRow = o) }), r.onDblClick.subscribe(function (t, s) { e.editProcess() }), $("#loading-indicator").hide() } }) }, e.loadProcess = function () { var t = e.pselectedProcessDataRow; "" != e.pselectedProcessGUID ? ($("#txtProcessGUID").val(t.ProcessGUID), $("#txtProcessName").val(t.ProcessName), $("#txtVersion").val(t.Version), $("#ddlIsUsing").val(t.IsUsing), $("#txtDescription").val(t.Description)) : ($("#txtProcessGUID").val(""), $("#txtProcessName").val(""), $("#txtVersion").val("1"), $("#ddlIsUsing").val(), $("#txtDescription").val("")) }, e.initEditForm = function () { $("#modelProcessForm").on("hidden", function () { $(this).removeData("modal").find(".modal-body").empty() }) }, e.createProcess = function () { e.pselectedProcessGUID = "", $("#modelProcessForm").modal({ remote: "/sfd/process/edit" }) }, e.editProcess = function () { var t = e.pselectedProcessDataRow; return null == t ? ($.msgBox({ title: "Designer / Process", content: "请先选择流程记录！", type: "alert" }), !1) : void $("#modelProcessForm").modal({ remote: "/sfd/process/edit" }) }, e.saveProcess = function () { if ("" == $("#txtProcessName").val() || "" == $("#txtVersion").val()) return $.msgBox({ title: "Designer / Process", content: "请输入流程基本信息！", type: "alert" }), !1; var t = { ProcessGUID: $("#txtProcessGUID").val(), ProcessName: $("#txtProcessName").val(), Version: $("#txtVersion").val(), IsUsing: $("#ddlIsUsing").val(), Description: $("#txtDescription").val() }; "" == e.pselectedProcessGUID ? processapi.create(t) : processapi.update(t), $("#modelProcessForm").modal("hide") }, e.deleteProcess = function () { $.msgBox({ title: "Are You Sure", content: "确实要删除流程定义记录吗? ", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (t) { if ("Yes" == t) { var s = { ProcessGUID: e.pselectedProcessGUID, Version: 1 }; return void processapi["delete"](s) } } }) }, e.sure = function () { $("#modelProcessListForm").modal("hide"), "" != e.pselectedProcessGUID && e.renderProcess(e.pselectedProcessGUID) }, e.renderProcess = function (e) { kmain.setSelectedProcessGUIDCurrent(e); var t = kmain.mselectedProcessVersion, s = { processGUID: e, processVersion: t }; kmain.misSelectedNew && e && processfile.queryProcessFile(s, function (e) { if (1 == e.Status) { jsPlumb.deleteEveryEndpoint(), jsPlumb.detachEveryConnection(), jsPlumb.empty("kgraphContainer"); var t = e.Entity; kmain.mgraphView = kloader.initialize(t), kmain.mcurrentPackageData = kmain.mgraphView.packageData } else $.msgBox({ title: "Designer / Process", content: "流程定义记录读取失败！错误：" + e.Message, type: "error" }) }) }, e }(), processapi = function () { function e() { } return e.create = function (e) { jshelper.ajaxPost("/SfApi/api/Wf2Xml/CreateProcess", JSON.stringify(e), function (e) { 1 == e.Status ? ($.msgBox({ title: "Designer / Process", content: "流程记录已经成功创建，可以在主面板创建图形了！", type: "info" }), processlist.pselectedProcessGUID = e.Entity.ProcessGUID, processlist.renderProcess(processlist.pselectedProcessGUID)) : $.msgBox({ title: "Designer / Process", content: e.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }, e.update = function (e) { jshelper.ajaxPost("/SfApi/api/Wf2Xml/UpdateProcess", JSON.stringify(e), function (e) { 1 == e.Status ? $.msgBox({ title: "Designer / Process", content: "流程成功保存！", type: "info" }) : $.msgBox({ title: "Ooops", content: e.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }, e["delete"] = function (e) { jshelper.ajaxPost("/SfApi/api/Wf2Xml/DeleteProcess", JSON.stringify(e), function (e) { 1 == e.Status ? ($.msgBox({ title: "Designer / Process", content: "流程记录已经删除！", type: "info" }), processlist.getProcessList()) : $.msgBox({ title: "Ooops", content: e.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }, e }(), rolelist = function () { function e() { } var t = "", s = null; return e.getRoleList = function () { var e = "/SfApi/api/Wf2Xml/GetRoleAll"; jshelper.ajaxGet(e, null, function (e) { if (1 == e.Status) { var i = (e.Entity, [{ id: "id", name: "id", field: "ID", width: 60, cssClass: "bg-gray" }, { id: "RoleName", name: "角色名称", field: "RoleName", width: 200, cssClass: "bg-gray" }, { id: "RoleCode", name: "角色代码", field: "RoleCode", width: 200, cssClass: "bg-gray" }]), o = { editable: !0, enableCellNavigation: !0, enableColumnReorder: !0, asyncEditorLoading: !0, forceFitColumns: !1, topPanelHeight: 25 }, n = e.Entity, a = new Slick.Data.DataView({ inlineFilters: !0 }), r = new Slick.Grid("#myRoleGrid", a, i, o); a.onRowsChanged.subscribe(function (e, t) { r.invalidateRows(t.rows), r.render() }), a.onRowCountChanged.subscribe(function (e, t) { r.updateRowCount(), r.render() }), a.beginUpdate(), a.setItems(n, "ID"), r.setSelectionModel(new Slick.RowSelectionModel), a.endUpdate(), r.onSelectedRowsChanged.subscribe(function (e, i) { var o = i.rows[0], n = a.getItemByIdx(o); n && (t = "role", s = n) }) } }) }, e.sure = function () { "" != t && null != s ? (kmain.selectedParticipantType = t, kmain.selectedParticipantItem = s, activityproperty.syncActivityPerformers(kmain.selectedParticipantType, kmain.selectedParticipantItem), $("#modelRoleListForm").modal("hide")) : $.msgBox({ title: "Designer / Role", content: "请选择角色记录！", type: "alert" }) }, e }(), subprocessmanager; subprocessmanager || (subprocessmanager = {}), function () { var e = null, t = null; return subprocessmanager.load = function () { var e = kmain.currentSelectedDomElement.node; null !== e && void 0 != e.sdata.subId && ($("#txtProcessGUID").val(e.sdata.subId), subprocessmanager.getProcess(e.sdata.subId)), subprocessmanager.getProcessList() }, subprocessmanager.getProcessList = function () { function s(e, t, s, i, o) { return null != s && "" != s ? s.substring(0, 10) : void 0 } $("#spinner").show(), jshelper.ajaxGet("/SfApi/api/Wf2Xml/GetProcessListSimple", null, function (i) { if (1 === i.Status) { var o = [{ id: "ID", name: "ID", field: "ID", width: 40, cssClass: "bg-gray" }, { id: "ProcessGUID", name: "流程GUID", field: "ProcessGUID", width: 120, cssClass: "bg-gray" }, { id: "ProcessName", name: "流程名称", field: "ProcessName", width: 160, cssClass: "bg-gray" }, { id: "Version", name: "版本", field: "Version", width: 40, cssClass: "bg-gray" }, { id: "IsUsing", name: "使用状态", field: "IsUsing", width: 60, cssClass: "bg-gray" }, { id: "CreatedDateTime", name: "创建日期", field: "CreatedDateTime", width: 120, cssClass: "bg-gray", formatter: s }], n = { editable: !0, enableCellNavigation: !0, enableColumnReorder: !0, asyncEditorLoading: !0, forceFitColumns: !1, topPanelHeight: 25 }, a = i.Entity, r = new Slick.Data.DataView({ inlineFilters: !0 }), l = new Slick.Grid("#mySubProcessGrid", r, o, n); r.onRowsChanged.subscribe(function (e, t) { l.invalidateRows(t.rows), l.render() }), r.onRowCountChanged.subscribe(function (e, t) { l.updateRowCount(), l.render() }), r.beginUpdate(), r.setItems(a, "ID"), l.setSelectionModel(new Slick.RowSelectionModel), r.endUpdate(), l.onSelectedRowsChanged.subscribe(function (s, i) { var o = i.rows[0], n = r.getItemByIdx(o); n && (e = n.ProcessGUID, t = n.ProcessName) }) } }) }, subprocessmanager.getProcess = function (e) { null !== e && "undefined" !== e && jshelper.ajaxGet("/SfApi/api/Wf2Xml/GetProcess/" + e, null, function (e) { if (1 == e.Status) { var t = e.Entity; $("#txtProcessName").val(t.ProcessName) } }) }, subprocessmanager.saveSubProcess = function () { $.msgBox({ title: "Are You Sure", content: "请确认要将当前选中记录设置为子流程吗？！", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (s) { if ("Yes" == s) { $("#txtProcessGUID").val(e), $("#txtProcessName").val(t); var i = $("#modelSubProcessForm").data("node"); return i.sdata.subId = e, void $("#modelSubProcessForm").modal("hide") } } }) }, subprocessmanager }(); var transitionproperty = function () { function e() { } return e.load = function () { var e = kmain.currentSelectedDomElement.line; e && ($("#txtDescription").val(e.sdata.description), e.sdata.condition && $("#txtCondition").val($.trim(e.sdata.condition.text))) }, e.save = function () { var e = $("#txtDescription").val(), t = {}; t.type = "Expression", t.text = $.trim($("#txtCondition").val()); var s = $("#modelTransitionForm").data("line"); s.sdata.description = e, s.sdata.condition = t, $("#modelTransitionForm").modal("hide") }, e }();