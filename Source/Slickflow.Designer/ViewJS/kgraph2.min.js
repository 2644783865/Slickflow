var plumbutility = function () { function t() { } t.importDefault = function () { jsPlumb.importDefaults({ DragOptions: { cursor: "pointer", zIndex: 2e3 }, EndpointStyles: [{ fillStyle: "#225588" }, { fillStyle: "#558822" }], Endpoints: [["Dot", { radius: 2 }], ["Dot", { radius: 2 }]], ConnectionOverlays: [["Arrow", { location: 1, width: 10, length: 10, foldback: 1 }], ["Label", { location: .1, id: "label", cssClass: "aLabel" }]] }) }; var e = { lineWidth: .6, strokeStyle: "#096EBB", joinstyle: "round", outlineColor: "#096EBB", outlineWidth: .6 }, n = { lineWidth: 1, strokeStyle: "#5C96BC", outlineWidth: 1, outlineColor: "white" }, i = { fillStyle: "#5C96BC" }; return t.drawUtil = { sourceEndpoint: { endpoint: "Dot", paintStyle: { strokeStyle: "#1e8151", fillStyle: "transparent", radius: 3, lineWidth: 1 }, isSource: !0, maxConnections: -1, connector: ["Flowchart", { stub: [6, 6], gap: 1, cornerRadius: 5, alwaysRespectStubs: !0 }], connectorStyle: e, hoverPaintStyle: i, connectorHoverStyle: n, dragOptions: {}, overlays: [["Label", { location: [.5, 1.5], label: "", cssClass: "endpointSourceLabel" }]] }, targetEndpoint: { endpoint: "Dot", paintStyle: { fillStyle: "#1e8151", radius: 3 }, hoverPaintStyle: i, maxConnections: -1, dropOptions: { hoverClass: "hover", activeClass: "active" }, isTarget: !0, overlays: [["Label", { location: [.5, -.5], label: "", cssClass: "endpointTargetLabel" }]] }, addEndpoints: function (t, e, n) { for (var i = 0; i < e.length; i++) { var r = t + e[i]; jsPlumb.addEndpoint(t, this.sourceEndpoint, { anchor: e[i], uuid: r }) } for (var o = 0; o < n.length; o++) { var a = t + n[o]; jsPlumb.addEndpoint(t, this.targetEndpoint, { anchor: n[o], uuid: a }) } } }, t }(), kloader = function () { function t() { } return t.createNew = function (t) { var e = {}, n = {}, i = [{ id: jshelper.getUUID(), name: "开始", code: "start", type: "StartNode", left: 370, top: 70, width: 50, height: 50, inputConnectors: [{ type: "input", index: 1, name: "A" }], outputConnectors: [{ type: "output", index: 1, name: "X" }] }, { id: jshelper.getUUID(), name: "结束", code: "end", type: "EndNode", left: 370, top: 370, width: 50, height: 50, inputConnectors: [{ type: "input", index: 1, name: "A" }], outputConnectors: [{ type: "output", index: 1, name: "X" }] }]; e.process = n, n.id = t.ProcessGUID, n.name = t.ProcessName, n.description = t.Description, n.snodes = i; var r = new kgraph.GraphView(t.ProcessGUID, e); return r }, t.initialize = function (t) { var e = {}, n = {}, i = [], r = $.parseXML(t.XmlContent); e.participants = i, e.process = n, $(r).find("Participant").each(function (t) { var e = {}; e.type = $(this).attr("type"), e.id = $(this).attr("id"), e.name = $(this).attr("name"), e.code = $(this).attr("code"), e.outerId = $(this).attr("outerId"), i.push(e) }); var o = $(r).find("Process"); if (o) { var a = [], s = []; n.name = $(o).attr("name"), n.id = $(o).attr("id"); var l = $(o).children("Description"); n.description = jshelper.replaceHTMLTags($(l).text()), n.snodes = a, n.slines = s, $(o).find("Activity").each(function (t) { var e = this, n = {}, i = {}, r = [], o = {}, s = {}, l = {}; n.id = $(e).attr("id"), n.name = $(e).attr("name"), n.code = $(e).attr("code"), n.text = ""; var d = $(e).find("Description"); n.description = jshelper.replaceHTMLTags($(d).text()), i = $(e).find("ActivityType"), n.type = $(i).attr("type"), "GatewayNode" == n.type ? (n.gatewaySplitJoinType = $(i).attr("gatewaySplitJoinType"), n.gatewayDirection = $(i).attr("gatewayDirection")) : "SubProcessNode" == n.type ? n.subId = $(i).attr("subId") : "MultipleInstanceNode" == n.type && (n.complexType = $(i).attr("complexType"), n.mergeType = $(i).attr("mergeType"), n.compareType = $(i).attr("compareType"), n.completeOrder = $(i).attr("completeOrder")), $(e).find("Performer").each(function (t) { var e = this, n = {}; n.id = $(e).attr("id"), r.push(n) }), n.performers = r, o = $(e).find("Geography"), s = $(o).find("Widget"); var c = [], p = []; n.inputConnectors = c, n.outputConnectors = p, n.left = parseInt($(s).attr("left")), n.top = parseInt($(s).attr("top")), n.width = parseInt($(s).attr("width")), n.height = parseInt($(s).attr("height")), l = $(s).find("Connectors"), $(l).find("Connector").each(function (t) { var e = this, i = {}; i.type = $(e).attr("type"), i.index = $(e).attr("index"), i.name = $(e).attr("name"); var r = $(e).attr("type"); "input" == r ? n.inputConnectors.push(i) : "output" == r && n.outputConnectors.push(i) }), a.push(n) }), $(r).find("Transition").each(function (t) { var e = {}; e.id = $(this).attr("id"), e.from = $(this).attr("from"), e.to = $(this).attr("to"); var n = $(this).find("Description"); e.description = jshelper.replaceHTMLTags($(n).text()); var i = {}, r = $(this).find("Condition"), o = $(r).attr("type"); if (void 0 !== o) { i.type = o; $(this).find("ConditionText"); i.text = jshelper.replaceHTMLTags($(r).text()) } e.condition = i; var a = $(this).find("Geography"), l = $(a).find("Line"); e.fromConnector = $(l).attr("fromConnector"), e.toConnector = $(l).attr("toConnector"), s.push(e) }) } var d = { processGUID: t.ProcessGUID, version: t.Version, packageData: e }, c = new kgraph.GraphView(d); return c }, t.serialize2Xml = function (t, e) { var n = {}, i = new XMLWriter("utf-8", "1.0"); i.formatting = "indented", i.indentChar = " ", i.indentation = 2, i.writeStartDocument(void 0), i.writeStartElement("Package"); var r = e.participants; if (r) { var o = r.length; if (o > 0) { i.writeStartElement("Participants"); for (var a = 0; o > a; a++) { var s = r[a]; i.writeStartElement("Participant"), i.writeAttributeString("type", s.type), i.writeAttributeString("id", s.id), i.writeAttributeString("name", s.name), i.writeAttributeString("code", s.code), i.writeAttributeString("outerId", s.outerId), i.writeEndElement() } i.writeEndElement() } } var l = e.process; i.writeStartElement("WorkflowProcesses"), i.writeStartElement("Process"), i.writeAttributeString("name", l.name), i.writeAttributeString("id", l.id), l.description && i.writeElementString("Description", jshelper.escapeHtml(l.description)); var d = l.snodes.length; if (d > 0) { i.writeStartElement("Activities"); for (var c = 0; d > c; c++) { var p = l.snodes[c]; if (i.writeStartElement("Activity"), i.writeAttributeString("name", p.name), i.writeAttributeString("id", p.id), i.writeAttributeString("code", p.code), p.description && i.writeElementString("Description", jshelper.escapeHtml(p.description)), i.writeStartElement("ActivityType"), i.writeAttributeString("type", p.type), "GatewayNode" == p.type ? (i.writeAttributeString("gatewaySplitJoinType", p.gatewaySplitJoinType), i.writeAttributeString("gatewayDirection", p.gatewayDirection)) : "SubProcessNode" == p.type ? i.writeAttributeString("subId", p.subId) : "MultipleInstanceNode" == p.type && (i.writeAttributeString("complexType", p.complexType), i.writeAttributeString("mergeType", p.mergeType), i.writeAttributeString("compareType", p.compareType), i.writeAttributeString("completeOrder", p.completeOrder)), i.writeEndElement(), p.performers) { var u = p.performers.length; if (u > 0) { i.writeStartElement("Performers"); for (var m = 0; u > m; m++) { var f = p.performers[m]; i.writeStartElement("Performer"), i.writeAttributeString("id", f.id), i.writeEndElement() } i.writeEndElement() } } i.writeStartElement("Geography"), i.writeStartElement("Widget"), i.writeAttributeString("left", p.left), i.writeAttributeString("top", p.top), i.writeAttributeString("width", p.width), i.writeAttributeString("height", p.height); var h = p.inputConnectors.length, g = p.outputConnectors.length; if (h > 0 || g > 0) { if (i.writeStartElement("Connectors"), h > 0) for (var E = 0; h > E; E++) { var y = p.inputConnectors[E]; i.writeStartElement("Connector"), i.writeAttributeString("type", y.type), i.writeAttributeString("index", y.index), i.writeAttributeString("name", y.name), i.writeEndElement() } if (g > 0) for (var v = 0; g > v; v++) { var y = p.outputConnectors[v]; i.writeStartElement("Connector"), i.writeAttributeString("type", y.type), i.writeAttributeString("index", y.index), i.writeAttributeString("name", y.name), i.writeEndElement() } i.writeEndElement() } i.writeEndElement(), i.writeEndElement(), i.writeEndElement() } i.writeEndElement() } if (l.slines) { var w = l.slines.length; if (w > 0) { i.writeStartElement("Transitions"); for (var S = 0; w > S; S++) { var C = l.slines[S]; i.writeStartElement("Transition"), i.writeAttributeString("id", C.id), i.writeAttributeString("from", C.from), i.writeAttributeString("to", C.to), C.description && i.writeElementString("Description", jshelper.escapeHtml(C.description)), C.condition && (i.writeStartElement("Condition"), C.condition.type && (i.writeAttributeString("type", C.condition.type), C.condition.text && (i.writeStartElement("ConditionText"), i.writeCDATA(C.condition.text), i.writeEndElement())), i.writeEndElement()), i.writeStartElement("Geography"), i.writeStartElement("Line"), i.writeAttributeString("fromConnector", C.fromConnector), i.writeAttributeString("toConnector", C.fromConnector), i.writeEndElement(), i.writeEndElement(), i.writeEndElement() } i.writeEndElement() } } return i.writeEndElement(), i.writeEndElement(), i.writeEndElement(), i.writeEndDocument(), n.ProcessGUID = t, n.XmlContent = i.flush(), i.close(), n }, t }(), kmain = function () { function t() { } function e() { $(".progress .bar").progressbar({ transition_delay: 500 }); var t = $(".js-loading-bar"); t.find(".bar"); t.modal("show"), setTimeout(function () { t.modal("hide") }, 1200) } function n(t, e, n) { $("#" + n).css({ "-webkit-transform": "scale(" + e + ")", "-moz-transform": "scale(" + e + ")", "-ms-transform": "scale(" + e + ")", "-o-transform": "scale(" + e + ")", transform: "scale(" + e + ")", TransformOrigin: "0% 0%" }), t.setZoom(e) } t.init = function () { e(), $("#kgraphContainer").empty(), r(), o(), i(), $(".wfdModalDialog").on("hidden", function () { $(this).removeData("modal").find(".modal-body").empty() }), $("#kgraphContainer").on("click", function (t) { $(this).focus() }) }; var i = function () { $("body").keyup(function (e) { return "kgraphContainer" != e.target.id ? !1 : void (46 == e.keyCode && null != t.currentSelectedDomElement && (t.currentSelectedDomElement.type === kgraph.Config.ELEMENT_TYPE_NODE ? $.msgBox({ title: "Are You Sure", content: "确认要删除节点吗? 将会删除节点属性及用户角色等数据!!!", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (e) { return "Yes" == e ? (jsPlumb.remove(t.currentSelectedDomElement.element), a(t.currentSelectedDomElement.node), void (t.currentSelectedDomElement = null)) : void 0 } }) : t.currentSelectedDomElement.type === kgraph.Config.ELEMENT_TYPE_CONNECTION && $.msgBox({ title: "Are You Sure", content: "确认要删除连线吗? 将会删除连线上的条件等数据!!!", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (e) { return "Yes" == e ? (jsPlumb.detach(t.currentSelectedDomElement.connection), s(t.currentSelectedDomElement.line), void (t.currentSelectedDomElement = null)) : void 0 } }))) }) }, r = function () { $(".imagepart").draggable({ helper: "clone", scope: "dragflag" }) }, o = function () { $("#kgraphContainer").droppable({ accept: ".imagepart", activeClass: "drop-active", scope: "dragflag", cursor: "cross", drop: function (e, n) { var i = parseInt(n.offset.left - $(this).offset().left), r = parseInt(n.offset.top - $(this).offset().top) + 4, o = n.draggable[0].id, a = { type: o, left: i, top: r }; return void 0 === t.mgraphView ? void $.msgBox({ title: "Designer / Index", content: "请先打开流程记录！", type: "info" }) : void t.mgraphView.drawSingleNode(a) } }) }; t.setSelectedProcessGUIDCurrent = function (e) { t.mselectedProcessGUIDCurrent != e ? (t.mselectedProcessGUIDPrevious = t.mselectedProcessGUIDCurrent, t.mselectedProcessGUIDCurrent = e, t.misSelectedNew = !0) : t.misSelectedNew = !1 }, t.cancelProcessRecord = function () { t.misSelectedNew = !1 }, t.saveProcessFile = function () { if (void 0 !== t.mgraphView) { var e = t.mgraphView.processGUID, n = t.mgraphView.packageData, i = kloader.serialize2Xml(e, n); processfile.saveProcessFile(i) } else $.msgBox({ title: "Designer / Index", content: "请确认图形是否处于编辑状态！", buttons: [{ value: "Ok" }] }) }; var a = function (e) { for (var n = e.id(), i = [], r = [], o = t.mgraphView.lines, a = t.mgraphView.processData.slines, s = 0; s < o.length; s++) (n == o[s].from() || n == o[s].to()) && r.push(s); for (var s = r.length - 1; s >= 0; s--) o.splice(r[s], 1); for (var s = 0; s < a.length; s++) (n == a[s].from || n == a[s].to) && i.push(s); for (var s = i.length - 1; s >= 0; s--) a.splice(i[s], 1); for (var l = t.mgraphView.nodes, s = 0; s < l.length; s++) if (n == l[s].id()) { l.splice(s, 1); break } for (var d = t.mgraphView.processData.snodes, s = 0; s < d.length; s++) if (n == d[s].id) { d.splice(s, 1); break } }, s = function (e) { for (var n = e.id(), i = t.mgraphView.lines, r = t.mgraphView.processData.slines, o = 0; o < i.length; o++) if (n == i[o].id()) { i.splice(o, 1); break } for (var o = 0; o < r.length; o++) if (n == r[o].id) { r.splice(o, 1); break } }; return t.exportXML = function () { if (void 0 == t.mgraphView) return $.msgBox({ title: "Designer / Graph", content: "请先打开流程记录！", type: "alert" }), !1; var e = t.mgraphView.processGUID, n = t.mgraphView.packageData, i = kloader.serialize2Xml(e, n); t.currentXmlContent = i.XmlContent, $("#modalXMLContentForm").modal("show"), $("#txtXmlContentArea").val(t.currentXmlContent) }, t.exportPNG = function () { var t = $("#kgraphContainer").get(0); html2canvas(t, { onrendered: function (e) { ctx = e.getContext("2d"), $flows = $("> svg", t), $flows.each(function () { $svg = $(this), offset = $svg.position(), svgStr = this.outerHTML, ctx.drawSvg(svgStr, offset.left - 226, offset.top - 58) }), $endpoints = $("._jsPlumb_endpoint > svg", t), $endpoints.each(function () { $svg = $(this), offset = $svg.parent().position(), svgStr = this.outerHTML, ctx.drawSvg(svgStr, offset.left, offset.top) }), e.toBlob(function (t) { saveAs(t, "screenshot.png") }) } }) }, t.ratioDisplay = function () { var t = document.getElementById("rear-ratio"), e = document.getElementById("rear-ratio-display"); e.value = t.value, n(jsPlumb, t.value / 100, "kgraphContainer"), $("#kgraphContainer").css({ left: "0px", right: "180px" }) }, t.ratioDisplay2 = function () { var t = document.getElementById("rear-ratio-display"), e = document.getElementById("rear-ratio"); e.value = t.value, n(jsPlumb, t.value / 100, "kgraphContainer"), $("#kgraphContainer").css({ left: "0px", right: "180px" }) }, t }(), kgraph = function () { function t() { } return t.Config = { NODE_PREFIX: "ACT", NODE_TYPE_START: "StartNode", NODE_TYPE_TASK: "TaskNode", NODE_TYPE_END: "EndNode", NODE_TYPE_GATEWAY: "GatewayNode", NODE_TYPE_SUBPROCESS: "SubProcessNode", NODE_TYPE_MULTIPLEINSTANCE: "MultipleInstanceNode", NODE_TYPE_COMPLEX_SIGNTOGETHER: "SignTogether", NODE_TYPE_COMPLEX_SIGHFORWARD: "SignForward", ELEMENT_TYPE_NODE: "NODE", ELEMENT_TYPE_CONNECTION: "CONNECTION" }, t.GraphView = function (e) { var n = this; this.processGUID = e.processGUID, this.packageData = e.packageData, this.processData = e.packageData.process; var i = function () { plumbutility.importDefault(), jsPlumb.setContainer("kgraphContainer"), jsPlumb.bind("connection", function (i, s) { var l = i.source.id.substr(3, i.source.id.length - 3), d = i.target.id.substr(3, i.target.id.length - 3), c = o(l, d); if (null === c) { c = { id: jshelper.getUUID(), from: l, to: d, description: "请输入转移描述信息", fromConnector: 1, toConnector: 1 }; var p = e.packageData.process.slines; p.push(c); var u = new t.Line(c); n.lines.push(u) } i.connection.bind("click", function (t, e) { var n = i.source.id.substr(3, i.source.id.length - 3), o = i.target.id.substr(3, i.target.id.length - 3), s = a(n, o); r(t, s) }).bind("dblclick", function (t, e) { var n = kmain.currentSelectedDomElement.line, i = "/sfd/transition/edit"; $("#modelTransitionForm").data("line", n).modal({ remote: i }) }) }), jsPlumb.registerConnectionTypes({ selected: { paintStyle: { strokeStyle: "red", lineWidth: 1 }, hoverPaintStyle: { lineWidth: 1.5 }, cssClass: "connector-selected" } }), jsPlumb.draggable("item_left", { grid: [10, 10] }) }, r = function (e, n) { null != kmain.currentSelectedDomElement && (null != kmain.currentSelectedDomElement.connection ? kmain.currentSelectedDomElement.connection.toggleType("selected") : null != kmain.currentSelectedDomElement.node && $(kmain.currentSelectedDomElement.element).toggleClass("highlight")), kmain.currentSelectedDomElement = { type: t.Config.ELEMENT_TYPE_CONNECTION, connection: e, line: n }, e.toggleType("selected") }, o = function (t, n) { for (var i = null, r = e.packageData.process.slines, o = 0; o < r.length; o++) if (r[o].from === t && r[o].to === n) { i = r[o]; break } return i }, a = function (t, e) { for (var i = null, r = o(t, e), a = 0; a < n.lines.length; a++) if (r.id == n.lines[a].id()) { i = n.lines[a]; break } return i }; i(); var s = function (e) { var n = null, i = []; if (e) for (var r = 0; r < e.length; r++) n = new t.Node(e[r]), i.push(n); return i }; this.nodes = s(this.processData.snodes); var l = function (t) { for (var n = null, i = e.packageData.process.snodes, r = 0; r < i.length; r++) if (i[r].id == t) { n = i[r]; break } return n }, d = function (e) { var n = null, i = []; if (e) for (var r = 0; r < e.length; r++) { var o = l(e[r].from), a = l(e[r].to); n = new t.Line(e[r], o, a), n.render(), i.push(n) } return i }; this.lines = d(this.processData.slines), this.drawSingleNode = function (e) { var n = { id: jshelper.getUUID(), code: "", type: e.type, complexType: e.complexType, left: e.left, top: e.top, inputConnectors: [], outputConnectors: [] }; if (e.type == t.Config.NODE_TYPE_START) n.name = "开始"; else if (e.type == t.Config.NODE_TYPE_END) n.name = "结束"; else if (e.type == t.Config.NODE_TYPE_GATEWAY) n.name = "Gateway"; else if (e.type == t.Config.NODE_TYPE_SUBPROCESS) n.name = "子流程"; else if (e.type == t.Config.NODE_TYPE_TASK) n.name = "新节点"; else { if (e.type != t.Config.NODE_TYPE_MULTIPLEINSTANCE) throw new Error("未知节点类型！"); n.name = "会(加)签" } var i = new t.Node(n); this.processData.snodes.push(n), this.nodes.push(i) } }, t.Node = function (e) { this.sdata = e; var n = this; this.id = function () { return this.sdata.id }, this.name = function () { return this.sdata.name || "" }, this.code = function () { return this.sdata.code || "" }, this.text = function () { return this.sdata.text || "" }, this.type = function () { return this.sdata.type }, this.complexType = function () { return this.sdata.complexType }, this.left = function () { return this.sdata.left }, this.top = function () { return this.sdata.top }, this.width = function () { return this.sdata.width }, this.height = function () { return this.sdata.height }, this.setNodeName = function (e) { var n = t.Config.NODE_PREFIX + this.id(); $("#" + n).text(e) }, this.render = function () { var o = null, a = t.Config.NODE_PREFIX + this.id(); if (this.type() === t.Config.NODE_TYPE_START) o = this.renderStartNode(a); else if (this.type() === t.Config.NODE_TYPE_END) o = this.renderEndNode(a); else if (this.type() === t.Config.NODE_TYPE_TASK || this.type() === t.Config.NODE_TYPE_MULTIPLEINSTANCE) o = this.renderTaskNode(a, this); else if (this.type() === t.Config.NODE_TYPE_GATEWAY) o = this.renderGatewayNode(a, this); else { if (this.type() !== t.Config.NODE_TYPE_SUBPROCESS) throw new Error("未知节点类型！"); o = this.renderSubProcessNode(a, this) } this.sdata.width = o.width(), this.sdata.height = o.height(), o.bind("click", function () { i(n, this) }).bind("dblclick", function () { r(n) }), jsPlumb.draggable(a, { grid: [10, 10], stop: function (t, n) { var i = n.position.left, r = n.position.top; e.left = Math.round(1e4 * i) / 1e4, e.top = Math.round(1e4 * r) / 1e4 } }) }; var i = function (e, n) { null != kmain.currentSelectedDomElement && (null != kmain.currentSelectedDomElement.connection ? kmain.currentSelectedDomElement.connection.toggleType("selected") : null != kmain.currentSelectedDomElement.node && $(kmain.currentSelectedDomElement.element).toggleClass("highlight")), kmain.currentSelectedDomElement = { type: t.Config.ELEMENT_TYPE_NODE, node: e, element: n }, $(kmain.currentSelectedDomElement.element).toggleClass("highlight") }; this.renderTaskNode = function (t, e) { var n = $("<div>").attr("id", t).addClass("node"); return n.css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }), n.text(e.name()), $("#kgraphContainer").append(n), plumbutility.drawUtil.addEndpoints(t, ["Right", "Bottom"], ["Top", "Left"]), n }, this.renderGatewayNode = function (t, e) { var n = $("<div>").attr("id", t).addClass("gateway"); return n.css({ left: this.sdata.left - 10, top: this.sdata.top + 10, position: "absolute" }), $("#kgraphContainer").append(n), plumbutility.drawUtil.addEndpoints(t, ["Right"], ["Left"]), n }, this.renderSubProcessNode = function (t, e) { var n = $("<div>").attr("id", t).addClass("node"); return n.css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }), n.text(e.name()), $("#kgraphContainer").append(n), plumbutility.drawUtil.addEndpoints(t, ["Right"], ["Left"]), n }, this.renderStartNode = function (t) { var e = $("<div>").attr("id", t).addClass("circle-start"); return e.css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }), $("#kgraphContainer").append(e), plumbutility.drawUtil.addEndpoints(t, ["Right"], []), e }, this.renderEndNode = function (t) { var e = $("<div>").attr("id", t).addClass("circle-end"); return e.css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }), $("#kgraphContainer").append(e), plumbutility.drawUtil.addEndpoints(t, [], ["Left", "Top"]), e }, this.render(); var r = function (e) { var n = ""; if (e.type() == t.Config.NODE_TYPE_TASK || e.type() == t.Config.NODE_TYPE_MULTIPLEINSTANCE) n = "/sfd/activity/edit", $("#modelActivityForm").data("node", e).modal({ remote: n }); else if (e.type() == t.Config.NODE_TYPE_GATEWAY) n = "/sfd/activity/gateway", $("#modelGatewayForm").data("node", e).modal({ remote: n }); else { if (e.type() != t.Config.NODE_TYPE_SUBPROCESS) return e.type() == t.Config.NODE_TYPE_START || e.type() == t.Config.NODE_TYPE_END ? !1 : ($.msgBox({ title: "Designer / Graph", content: "未知节点类型！" + e.type(), type: "alert" }), !1); n = "/sfd/activity/subprocess", $("#modelSubProcessForm").data("node", e).modal({ remote: n }) } } }, t.Line = function (e, n, i) { this.sdata = e, this.connection = null; this.id = function () { return this.sdata.id }, this.from = function () { return this.sdata.from }, this.to = function () { return this.sdata.to }, this.render = function () { var r = "", o = ""; n.type == t.Config.NODE_TYPE_GATEWAY ? (r = "Right", o = i.type == t.Config.NODE_TYPE_TASK ? "Top" : "Left") : (r = "Right", o = "Left"); var a = t.Config.NODE_PREFIX + e.from, s = t.Config.NODE_PREFIX + e.to, l = a + r, d = s + o, c = jsPlumb.connect({ uuids: [l, d], editable: !1 }); this.connection = c } }, t }();