var accountmanager = function () { function e() { } return e.mrolelist = null, e.misValidated = !1, e.loadRoles = function (t) { $("#loading-indicator").show(); var r = {}; r.ProcessGUID = "5c5041fc-ab7f-46c0-85a5-6250c3aea375", r.Version = "1", jshelper.ajaxPost("/sfmvc/api/wf/QueryProcessRoleUserList", JSON.stringify(r), function (t) { if (1 == t.Status) { var r = t.Entity; e.mrolelist = r, $.each(r, function (e, t) { $("#ddlRoles").append($("<option>", { value: t.RoleCode, text: t.RoleName })) }), $("#ddlRoles").on("change", function (t) { var r = ($("option:selected", this), this.value); e.fillUsers(r) }), $("#loading-indicator").hide() } else $.msgBox({ title: "MvcDemo / Account", content: t.Message, type: "error" }) }) }, e.fillUsers = function (t) { $("#ddlUsers").find("option:gt(0)").remove(); var r = jQuery.grep(e.mrolelist, function (e) { return e.RoleCode == t }), i = r[0].UserList; $.each(i, function (e, t) { $("#ddlUsers").append($("<option>", { value: t.UserID, text: t.UserName })) }) }, e.login = function () { lsm.removeTempStorage(); var t = $("#ddlUsers").find(":selected").text(), r = $("#ddlUsers").find(":selected").val(); if (r > 0) { var i = {}; i.UserID = r, i.UserName = t, lsm.saveUserIdentity(i); var n = $("#ddlRoles").find(":selected").text(), s = $("#ddlRoles").find(":selected").val(), a = {}; a.RoleCode = s, a.RoleName = n, lsm.saveUserRole(a), e.misValidated = !0, $("#spnLogonUser").text(i.UserName), sfmain.ready(), sfmain.initWfAppRunner(), $("#modelLoginForm").modal("hide") } else $.msgBox({ title: "DynamicFlow / Login", content: "请选择角色和用户！", type: "alert" }) }, e }(), nextactivitytree = function () { function e() { } function t() { var e = { check: { enable: !0 }, view: { dblClickExpand: !1, showLine: !0, selectedMulti: !1 }, data: { simpleData: { enable: !0, idKey: "id", pIdKey: "pId", rootPId: "" } }, callback: { beforeClick: function (e, t) { var r = $.fn.zTree.getZTreeObj("nextStepTree"); return t.isParent ? (r.expandNode(t), !1) : !0 } } }; return e } return e.mzTree = null, e.mstepName = "", e.mEntity = null, e.showNextActivityTree = function (r, i) { e.mstepName = i, e.mEntity = r; var n = ""; n = "dispatch" == i ? "/sfmvc/api/wf/GetFirstStepRoleUserTree" : "/sfmvc/api/wf/GetNextStepRoleUserTree", jshelper.ajaxPost(n, JSON.stringify(e.mEntity.WfAppRunner), function (r) { if (1 === r.Status) { var i = r.Entity[0], n = [{ id: 0, pId: -1, name: "下一步流转", type: "root", open: !0 }, { id: 1, pId: 0, name: i.ActivityName, activityGUID: i.ActivityGUID, activityName: i.ActivityName, type: "activity", open: !1 }]; if (null != i.Users) { var s = 2, a = null; $.each(i.Users, function (e, t) { a = { id: s, pId: 1, name: t.UserName, uid: t.UserID, type: "user" }, n.push(a), s += 1 }) } var o = $("#nextStepTree"); e.mzTree = $.fn.zTree.init(o, t(), n) } else $.msgBox({ title: "DynFlow / GoNext", content: r.Message, type: "info" }) }) }, e.sure = function () { var t = e.mzTree.getCheckedNodes(); if (t.length <= 0) return $.msgBox({ title: "DynFlow / GoNext", content: "请单击选中下一步人员列表再进行流转！", type: "alert" }), !1; var r = {}; r.Users = []; var i = "", n = "", s = null, a = []; $.each(t, function (e, t) { "activity" == t.type ? (i = t.activityGUID, n = t.activityName) : "user" == t.type && (s = { UserID: t.uid, UserName: t.name }, a.push(s)) }); var o = e.mEntity.WfAppRunner; o.NextActivityPerformers = {}, o.NextActivityPerformers[i] = a, $.msgBox({ title: "Are You Sure", content: "请确认下一步是否要流转到步骤：" + n, type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (t) { "Yes" == t && jshelper.ajaxPost("/sfmvc/api/productorder/" + e.mstepName, JSON.stringify(e.mEntity), function (e) { 1 == e.Status ? ($.msgBox({ title: "DynFlow / GoNext", content: "流程已经流转到下一步！", type: "info" }), $("#modelNextStepForm").modal("hide")) : $.msgBox({ title: "DynFlow / GoNext", content: e.Message, type: "info" }) }) } }) }, e }(), pordermanager = function () { function e() { } function t(t) { var r = ["准备", "等待派单", "等待打样", "等待生产", "等待质检", "等待称重", "等待发货", "完成"], i = [{ id: "ID", name: "ID", field: "ID", width: 40, cssClass: "bg-gray" }, { id: "OrderCode", name: "订单标号", field: "OrderCode", width: 80, cssClass: "bg-gray" }, { id: "ProductName", name: "产品名称", field: "ProductName", width: 90, cssClass: "bg-gray" }, { id: "Status", name: "状态", field: "Status", width: 70, cssClass: "bg-gray", formatter: Slick.Formatters.EnmuabledText, enumabledTextArray: r }, { id: "Progress", name: "进度", field: "Status", width: 60, cssClass: "bg-gray", formatter: Slick.Formatters.PercentStatusBar, maxStatus: r.length }, { id: "UnitPrice", name: "单价", field: "UnitPrice", width: 60, cssClass: "bg-gray" }, { id: "Quantity", name: "数量", field: "Quantity", width: 60, cssClass: "bg-gray" }, { id: "TotalPrice", name: "总价", field: "TotalPrice", width: 80, cssClass: "bg-gray" }, { id: "CreatedTime", name: "订单时间", field: "CreatedTime", width: 120, cssClass: "bg-gray", formatter: Slick.Formatters.DataTime }, { id: "CustomerName", name: "客户名称", field: "CustomerName", width: 120, cssClass: "bg-gray" }, { id: "Address", name: "客户地址", field: "Address", width: 120, cssClass: "bg-gray" }, { id: "Mobile", name: "手机", field: "Mobile", width: 100, cssClass: "bg-gray" }, { id: "LastUpdatedTime", name: "最后更新时间", field: "LastUpdatedTime", width: 120, cssClass: "bg-gray", formatter: Slick.Formatters.DataTime }], n = { editable: !0, enableCellNavigation: !0, enableColumnReorder: !1, asyncEditorLoading: !0, forceFitColumns: !1, topPanelHeight: 25 }, s = e.mdvProductOrder = new Slick.Data.DataView({ inlineFilters: !0 }), a = e.mgridProductOrder = new Slick.Grid("#myGridProductOrder", s, i, n); s.onRowsChanged.subscribe(function (e, t) { a.invalidateRows(t.rows), a.render() }), s.onRowCountChanged.subscribe(function (e, t) { a.updateRowCount(), a.render() }), s.beginUpdate(), s.setItems(t, "ID"), a.setSelectionModel(new Slick.RowSelectionModel), a.autosizeColumns(), s.endUpdate(), a.onSelectedRowsChanged.subscribe(function (t, r) { var i = r.rows[0], n = s.getItemByIdx(i); if (n) { e.selectedRow = n, e.selectedRowIndex = i, e.selectedProductOrderID = n.ID, e.selectedProductOrderCode = n.OrderCode, e.getReadyActivityInstance(n.ID, e.mProductOrderProcessGUID), e.getAppFlowList(n.ID); var a = n.Status; "1" == a ? $("#divCondition").show() : $("#divCondition").hide() } }) } function r() { $(".progress .bar").progressbar({ transition_delay: 100 }); var e = $(".js-loading-bar"); e.find(".bar"); e.modal("show"), setTimeout(function () { e.modal("hide") }, 300) } e.mProductOrderProcessGUID = "5c5041fc-ab7f-46c0-85a5-6250c3aea375", e.mcurrentProcessInstanceID = 0, e.mcurrentAppName = "生产订单"; var i = {}; i.Ready = 1, i.Dispatched = 2, i.Sampled = 3, i.Manufactured = 4, i.QCChecked = 5, i.Weighted = 6, i.Deliveried = 7, e.checkUserPermission = function () { for (var e = $("button[rescode]"), t = 0; t < e.length; t++) { var r = $(e[t]).attr("rescode"), i = lsm.checkUserPermission(r); 0 == i && $(e[t]).prop("disabled", !0) } }, e.mgridProductOrder = null, e.mdvProductOrder = null, e.selectedProductOrderID = 0; return e.getCurrentLogonUser = function () { var t = lsm.getUserIdentity(); if (void 0 == t) return void $.msgBox({ title: "MvcDemo / Order", content: "请选择用户，重新登录！", type: "alert" }); var r = { UserID: t.UserID, UserName: t.UserName, AppName: "生产订单", AppInstanceID: e.selectedProductOrderID, ProcessGUID: e.mProductOrderProcessGUID }; return r }, e.getProductOrderList = function (e) { r(); var i = { PageIndex: 0, PageSize: 1e3 }; e === !0 && null !== lsm.getUserRole() && (i.RoleCode = lsm.getUserRole().RoleCode), jshelper.ajaxPost("/sfmvc/api/ProductOrder/QueryPaged", JSON.stringify(i), function (e) { 1 === e.Status ? t(e.Entity) : $.msgBox({ title: "MvcDemo / Order", content: e.Message, type: "error" }) }) }, e.queryByStatus = function () { var e = { PageIndex: 0, PageSize: 1e3, Status: $("#ddlStatus").val() }; jshelper.ajaxPost("/sfmvc/api/ProductOrder/QueryPaged", JSON.stringify(e), function (e) { 1 === e.Status ? t(e.Entity) : $.msgBox({ title: "MvcDemo / Order", content: e.Message, type: "error" }) }) }, e.updateRowCell = function (t) { var r = e.selectedRow, i = e.selectedRowIndex; r.Status = t, e.mgridProductOrder.invalidateRow(r), e.mgridProductOrder.invalidateRow(i), r[e.mgridProductOrder.getColumns()[3].id] = t, r[e.mgridProductOrder.getColumns()[4].id] = t, e.mdvProductOrder.updateItem(r.ID, r), e.mgridProductOrder.render() }, e.syncorder = function () { jshelper.ajaxPost("/sfmvc/api/productorder/syncorder", null, function (t) { 1 == t.Status ? ($.msgBox({ title: "MvcDemo / Order", content: "新的订单数据同步成功！", type: "info" }), e.getProductOrderList(!1)) : $.msgBox({ title: "MvcDemo / Order", content: t.Message, type: "error" }) }) }, e.runAppFlow = function (t) { var r = e.getCurrentLogonUser(); if (void 0 == r) return !1; var i = { UserID: r.UserID, UserName: r.UserName, AppName: e.mcurrentAppName, AppInstanceID: e.selectedProductOrderID, ProcessGUID: e.mProductOrderProcessGUID }, n = { ID: e.selectedProductOrderID, OrderCode: e.selectedProductOrderCode }; if ("dispatch" == t) jshelper.ajaxGet("/sfmvc/api/productorder/checkdispatched/" + e.selectedProductOrderID, null, function (e) { if (1 == e.Status) { var r = {}; r.CanUseStock = $("#chkStorage").is(":checked") ? "true" : "false", r.IsHavingWeight = $("#chkWeight").is(":checked") ? "true" : "false", i.Conditions = r; var s = { ProductOrderEntity: n, WfAppRunner: i }; $("#modelNextStepForm").modal("show"), nextactivitytree.showNextActivityTree(s, t) } else $.msgBox({ title: "DynFlow / GoNext", content: e.Message, type: "alert" }) }); else { var s = { ProductOrderEntity: n, WfAppRunner: i }; $("#modelNextStepForm").modal("show"), nextactivitytree.showNextActivityTree(s, t) } }, e.getReadyActivityInstance = function (e, t) { var r = {}; r.AppInstanceID = e, r.ProcessGUID = t, jshelper.ajaxPost("/sfmvc/api/Wf/QueryReadyActivityInstance", JSON.stringify(r), function (e) { if (1 === e.Status) { var t = [{ id: "ID", name: "ID", field: "ID", width: 40, cssClass: "bg-gray" }, { id: "AppInstanceID", name: "订单ID", field: "AppInstanceID", width: 40, cssClass: "bg-gray" }, { id: "ActivityName", name: "当前节点", field: "ActivityName", width: 80, cssClass: "bg-gray" }, { id: "CreatedDateTime", name: "创建时间", field: "CreatedDateTime", width: 120, cssClass: "bg-gray", formatter: Slick.Formatters.DataTime }, { id: "AssignedToUserNames", name: "任务接收人", field: "AssignedToUserNames", width: 320, cssClass: "bg-gray" }], r = { editable: !0, enableCellNavigation: !0, enableColumnReorder: !1, asyncEditorLoading: !0, forceFitColumns: !1, topPanelHeight: 25 }, i = e.Entity, n = new Slick.Data.DataView({ inlineFilters: !0 }), s = new Slick.Grid("#myGridReadyActivityInstance", n, t, r); n.onRowsChanged.subscribe(function (e, t) { s.invalidateRows(t.rows), s.render() }), n.onRowCountChanged.subscribe(function (e, t) { s.updateRowCount(), s.render() }), n.beginUpdate(), n.setItems(i, "ID"), s.setSelectionModel(new Slick.RowSelectionModel), s.autosizeColumns(), n.endUpdate() } else $.msgBox({ title: "MvcDemo / AppFlow", content: e.Message, type: "error" }) }) }, e.getAppFlowList = function (e) { var t = { PageIndex: 0, PageSize: 20, AppInstanceID: e }; jshelper.ajaxPost("/sfmvc/api/AppFlow/QueryPaged", JSON.stringify(t), function (e) { if (1 === e.Status) { var t = [{ id: "ID", name: "ID", field: "ID", width: 40, cssClass: "bg-gray" }, { id: "ActivityName", name: "完成节点", field: "ActivityName", width: 80, cssClass: "bg-gray" }, { id: "ChangedTime", name: "完成时间", field: "ChangedTime", width: 120, cssClass: "bg-gray", formatter: Slick.Formatters.DataTime }, { id: "ChangedUserName", name: "完成人", field: "ChangedUserName", width: 120, cssClass: "bg-gray" }], r = { editable: !0, enableCellNavigation: !0, enableColumnReorder: !1, asyncEditorLoading: !0, forceFitColumns: !1, topPanelHeight: 25 }, i = e.Entity, n = new Slick.Data.DataView({ inlineFilters: !0 }), s = new Slick.Grid("#myGridAppFlow", n, t, r); n.onRowsChanged.subscribe(function (e, t) { s.invalidateRows(t.rows), s.render() }), n.onRowCountChanged.subscribe(function (e, t) { s.updateRowCount(), s.render() }), n.beginUpdate(), n.setItems(i, "ID"), s.setSelectionModel(new Slick.RowSelectionModel), s.autosizeColumns(), n.endUpdate() } else $.msgBox({ title: "MvcDemo / AppFlow", content: e.Message, type: "error" }) }) }, e }(), sfmain = function () { function e() { } return e.WfAppRunner = {}, e.ready = function () { pordermanager.getProductOrderList(!0), $("#modelNextStepForm").on("hidden", function () { $(this).removeData("modal").find(".modal-body").empty() }) }, e.initWfAppRunner = function () { var t = lsm.getUserIdentity(); e.WfAppRunner.UserID = t.UserID, e.WfAppRunner.UserName = t.UserName }, e.checkWfAppRunner = function () { var e = !1, t = lsm.getUserIdentity(); return t && "" != $.trim(t.UserID) && "" != $.trim(t.UserName) && (e = !0), e }, e.showKGraph = function () { return "" == pordermanager.mProductOrderProcessGUID ? ($.msgBox({ title: "DynamicFlow / KGraph", content: "请选定有流程信息的表单！", type: "alert" }), !1) : void window.open("/sfmvc/AppFlow/KGraph/" + pordermanager.mProductOrderProcessGUID) }, e }();