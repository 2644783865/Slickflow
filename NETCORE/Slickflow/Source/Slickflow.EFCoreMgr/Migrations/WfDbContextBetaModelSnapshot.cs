// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Slickflow.EFCoreMgr.Data;
using System;

namespace Slickflow.EFCoreMgr.Migrations
{
    [DbContext(typeof(WfDbContextBeta))]
    partial class WfDbContextBetaModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Slickflow.Engine.Business.Entity.ActivityInstanceEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityGUID")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<short>("ActivityState")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((short)0);

                    b.Property<short>("ActivityType");

                    b.Property<string>("AppInstanceID")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AssignedToUserIDs")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("AssignedToUserNames")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int?>("BackSrcActivityInstanceID");

                    b.Property<short>("BackwardType");

                    b.Property<byte>("CanRenewInstance")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((byte)0);

                    b.Property<short?>("CompareType");

                    b.Property<double?>("CompleteOrder");

                    b.Property<short?>("ComplexType");

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedByUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("EndedByUserID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EndedByUserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<short?>("GatewayDirectionTypeID");

                    b.Property<string>("LastUpdatedByUserID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastUpdatedByUserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MIHostActivityInstanceID");

                    b.Property<short?>("MergeType");

                    b.Property<string>("ProcessGUID")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProcessInstanceID");

                    b.Property<byte>("RecordStatusInvalid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((byte)0);

                    b.Property<byte[]>("RowVersionID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    b.Property<short?>("SignForwardType");

                    b.Property<int>("TokensHad");

                    b.Property<int>("TokensRequired")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<short>("WorkItemType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((short)0);

                    b.HasKey("ID");

                    b.ToTable("WfActivityInstance");
                });

            modelBuilder.Entity("Slickflow.Engine.Business.Entity.LogEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventTypeID");

                    b.Property<string>("InnerStackTrace")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("Priority");

                    b.Property<string>("RequestData")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("ID");

                    b.ToTable("WfLog");
                });

            modelBuilder.Entity("Slickflow.Engine.Business.Entity.ProcessEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppType")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("EndExpression")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("EndType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((byte)0);

                    b.Property<byte>("IsUsing")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((byte)0);

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PageUrl")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ProcessGUID")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StartExpression")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("StartType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Version")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("1")
                        .HasMaxLength(20);

                    b.Property<string>("XmlContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("XmlFileName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("XmlFilePath")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("WfProcess");
                });

            modelBuilder.Entity("Slickflow.Engine.Business.Entity.ProcessInstanceEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppInstanceCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AppInstanceID")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedByUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("EndedByUserID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EndedByUserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvokedActivityGUID")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("InvokedActivityInstanceID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("LastUpdatedByUserID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastUpdatedByUserName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OverdueDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OverdueTreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParentProcessGUID")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentProcessInstanceID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("ProcessGUID")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<short>("ProcessState")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((short)0);

                    b.Property<byte>("RecordStatusInvalid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((byte)0);

                    b.Property<byte[]>("RowVersionID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    b.Property<string>("Version")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("1")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.ToTable("WfProcessInstance");
                });

            modelBuilder.Entity("Slickflow.Engine.Business.Entity.TaskEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityGUID")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ActivityInstanceID");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AppInstanceID")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AssignedToUserID")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AssignedToUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedByUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("EndedByUserID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EndedByUserName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntrustedTaskID");

                    b.Property<string>("LastUpdatedByUserID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastUpdatedByUserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessGUID")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProcessInstanceID");

                    b.Property<byte>("RecordStatusInvalid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((byte)0);

                    b.Property<byte[]>("RowVersionID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    b.Property<short>("TaskState")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((short)0);

                    b.Property<short>("TaskType");

                    b.HasKey("ID");

                    b.ToTable("WfTasks");
                });

            modelBuilder.Entity("Slickflow.Engine.Business.Entity.TransitionInstanceEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppInstanceID")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("ConditionParseResult")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((byte)0);

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedByUserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<byte>("FlyingType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((byte)0);

                    b.Property<string>("FromActivityGUID")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("FromActivityInstanceID");

                    b.Property<string>("FromActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<short>("FromActivityType");

                    b.Property<string>("ProcessGUID")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProcessInstanceID");

                    b.Property<byte>("RecordStatusInvalid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((byte)0);

                    b.Property<byte[]>("RowVersionID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp");

                    b.Property<string>("ToActivityGUID")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ToActivityInstanceID");

                    b.Property<string>("ToActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<short>("ToActivityType");

                    b.Property<string>("TransitionGUID")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("TransitionType");

                    b.HasKey("ID");

                    b.ToTable("WfTransitionInstance");
                });

            modelBuilder.Entity("Slickflow.Module.Resource.Entity.DeptEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DeptCode");

                    b.Property<string>("DeptName");

                    b.Property<string>("Description");

                    b.Property<int>("ParentID");

                    b.HasKey("ID");

                    b.ToTable("SysDepartment");
                });

            modelBuilder.Entity("Slickflow.Module.Resource.Entity.EmpEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DeptID");

                    b.Property<string>("EMail");

                    b.Property<string>("EmpCode");

                    b.Property<string>("EmpName");

                    b.Property<int>("ManagerID");

                    b.Property<string>("Mobile");

                    b.Property<string>("Remark");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("SysEmployee");
                });

            modelBuilder.Entity("Slickflow.Module.Resource.Entity.EmpMgrEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EmpUserID");

                    b.Property<int>("EmployeeID");

                    b.Property<int>("ManagerID");

                    b.Property<int>("MgrUserID");

                    b.HasKey("ID");

                    b.ToTable("SysEmployeeManager");
                });

            modelBuilder.Entity("Slickflow.Module.Resource.Entity.RoleEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleCode");

                    b.Property<string>("RoleName");

                    b.HasKey("ID");

                    b.ToTable("SysRole");
                });

            modelBuilder.Entity("Slickflow.Module.Resource.Entity.RoleUserEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoleID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("SysRoleUser");
                });

            modelBuilder.Entity("Slickflow.Module.Resource.Entity.UserEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.ToTable("SysUser");
                });
#pragma warning restore 612, 618
        }
    }
}
